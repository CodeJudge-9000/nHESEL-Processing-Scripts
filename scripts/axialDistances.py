import numpy as np

def axialDistance(s):

    # Begin by defining hardcoded values
    filteredR = np.array([2.13689628, 2.14092197, 2.14785074, 2.15638564, 2.16541388,
       2.17444759, 2.18359375, 2.19273991, 2.20177606, 2.21083363,
       2.21959155, 2.22762491, 2.23526571, 2.24329907, 2.252057  ,
       2.26111335, 2.27013665, 2.279193  , 2.28795093, 2.29598429,
       2.30362509, 2.31165845, 2.32041637, 2.32947394, 2.33851009,
       2.34765625, 2.35680241, 2.36583612, 2.37486314, 2.38338398,
       2.39021132, 2.39377302, 2.3924883 , 2.38656572, 2.37922759,
       2.37481281, 2.37567058, 2.38150919, 2.39103282, 2.40285236,
       2.41539031, 2.42684972, 2.43548971, 2.44050753, 2.44262897,
       2.44335938, 2.44408978, 2.44621122, 2.45123026, 2.45988431,
       2.47145003, 2.48451064, 2.49806215, 2.51170469, 2.52527026,
       2.53843596, 2.55050907, 2.56077595, 2.56930264, 2.57704609,
       2.58508067, 2.59374878, 2.60240283, 2.61031826, 2.61745046,
       2.62387099, 2.62912005, 2.6325391 , 2.63413909, 2.63464526,
       2.63475035, 2.63476441, 2.63476562, 2.63476562, 2.63476562,
       2.63476562, 2.63476562, 2.63476562, 2.63476684, 2.63478212,
       2.63490005, 2.63549725, 2.63749832, 2.64200997, 2.64906526,
       2.65722598, 2.66514141, 2.67276571, 2.68078502, 2.68945191,
       2.69810718, 2.70603667, 2.71327395, 2.72020065, 2.7270497 ,
       2.73388658, 2.74072279, 2.74755846, 2.75439467, 2.76123155,
       2.7680806 , 2.7750073 , 2.78224458, 2.79017407, 2.79882934,
       2.80749745, 2.81553081, 2.82326021, 2.83168303, 2.8414578 ,
       2.85203478, 2.86227477, 2.87210145, 2.88235427, 2.89302107,
       2.9031853 , 2.91262375, 2.92186094, 2.93102116, 2.94007259,
       2.94923281, 2.95847   , 2.96790845, 2.97807268, 2.9887407 ,
       2.99900758, 3.00893935, 3.0196855 , 3.03186126, 3.04504102,
       3.05860903, 3.07226684, 3.0859375 , 3.09960938, 3.11328125,
       3.12695312, 3.140625  , 3.15429688, 3.16796875, 3.18164062,
       3.1953125 , 3.20898438, 3.22265625, 3.23632812, 3.25      ,
       3.26367188, 3.27734253, 3.29099913, 3.30455186, 3.31761247,
       3.32917819, 3.33783224, 3.34285006, 3.34495622, 3.34556748,
       3.34568663, 3.34570191, 3.34570312, 3.34570312, 3.34570312])
    distCutout = np.array([-1.04060183, -1.02901327, -1.00914719, -0.99755864, -0.98597009,
       -0.966104  , -0.95451545, -0.9429269 , -0.92306081, -0.91147226,
       -0.89988371, -0.88001762, -0.86842907, -0.84856298, -0.83697443,
       -0.82538588, -0.80551979, -0.79393124, -0.78234269, -0.76247661,
       -0.75088806, -0.73102197, -0.71943342, -0.70784487, -0.68797878,
       -0.67639023, -0.66480168, -0.64493559, -0.63334704, -0.62175849,
       -0.6018924 , -0.59030385, -0.57043776, -0.55884921, -0.53585017,
       -0.52426162, -0.51267307, -0.49280698, -0.48121843, -0.45821939,
       -0.44663084, -0.4236318 , -0.40063276, -0.38076667, -0.36090058,
       -0.34103449, -0.32116841, -0.30130232, -0.28143623, -0.26984768,
       -0.25825913, -0.24667058, -0.23508203, -0.22349348, -0.21190493,
       -0.20031638, -0.18872783, -0.17713928, -0.15727319, -0.14568464,
       -0.12581855, -0.11423   , -0.10264145, -0.08277536, -0.07118681,
       -0.05132072, -0.03973217, -0.01986609,  0.        ,  0.01986609,
        0.03973217,  0.05959826,  0.07946435,  0.09933044,  0.11919652,
        0.13906261,  0.1589287 ,  0.17879478,  0.19866087,  0.21852696,
        0.23839304,  0.25825913,  0.27812522,  0.29799131,  0.32099035,
        0.3325789 ,  0.35244499,  0.36403354,  0.38389962,  0.40689867,
        0.41848722,  0.4383533 ,  0.44994185,  0.46980794,  0.48139649,
        0.50126258,  0.51285113,  0.53271722,  0.54430577,  0.56417185,
        0.57576041,  0.59562649,  0.60721504,  0.62708113,  0.63866968,
        0.66166872,  0.68153481,  0.69312336,  0.71298945,  0.724578  ,
        0.74757704,  0.75916559,  0.77903168,  0.79062023,  0.80220878,
        0.81379733,  0.83366342,  0.84525197,  0.85684052,  0.87670661,
        0.88829516,  0.89988371,  0.9197498 ,  0.93133835,  0.9429269 ,
        0.95451545,  0.97438153,  0.98597009,  0.99755864,  1.00914719,
        1.02073574,  1.03232429,  1.04391284,  1.05550139,  1.06708994,
        1.07867849,  1.09026704,  1.10185559,  1.11344414,  1.1250327 ,
        1.13662125,  1.1482098 ,  1.15979835,  1.1713869 ,  1.18297545,
        1.194564  ,  1.20615255,  1.2177411 ,  1.22932965,  1.2409182 ,
        1.25250675,  1.2640953 ,  1.28396139,  1.30382748,  1.32369357,
        1.34355965,  1.36342574,  1.38329183,  1.40315791,  1.423024  ])
    
    # First figure out which indices it lies between on the s values
    for i in range(len(distCutout)):
        pos = distCutout[i]
        if pos >= s:
            # Handling the first position
            if i == 0:
                return filteredR[0]
            # Handling the last position
            elif i == (len(distCutout)-1):
                return filteredR[-1]
            # And the interpolation of everything in-between
            elif i != 0:
                lowerIndex = i-1
                upperIndex = i
                lowerPos = distCutout[lowerIndex]
                upperPos = distCutout[upperIndex]
                lowerR = filteredR[lowerIndex]
                upperR = filteredR[upperIndex]
            break
        else:
            # Handling the last position
            if i == (len(distCutout)-1):
                return filteredR[-1]
            else:
                pass

    # Fuck it wikipedia: https://en.wikipedia.org/wiki/Linear_interpolation
    interpolated_R = lowerR + (s - lowerPos)*((upperR - lowerR)/(upperPos - lowerPos))

    return interpolated_R

def axialDistances(s):
    # Just call axialDistance for each coordinates
    Rs = np.array([axialDistance(es) for es in s])

    return Rs
